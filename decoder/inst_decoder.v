module inst_decoder(
    input [1:0] alu_op,
    input [2:0] funct3,
    input funct7_5,
    output [2:0] alu_ctrl,
);
    // following code is generated by GPT4.
    //TODO: check the correctness of the code by human inspection.
    always @(*) begin
        // Initialize ALU control signal to 0
        alu_ctrl = 3'b000;

        // Decode ALU operations
        case (alu_op) 
            2'b00: begin // Load/Store
                case (funct3)
                    3'b000: alu_ctrl = 3'b000; // ADD (load)
                    3'b010: alu_ctrl = 3'b000; // ADD (store)
                endcase
            end

            2'b01: begin // Branch
                case (funct3)
                    3'b000: alu_ctrl = 3'b001; // BEQ (SUB)
                    3'b001: alu_ctrl = 3'b001; // BNE (SUB)
                    3'b100: alu_ctrl = 3'b001; // BLT (SUB)
                    3'b101: alu_ctrl = 3'b001; // BGE (SUB)
                    3'b110: alu_ctrl = 3'b001; // BLTU (SUB)
                    3'b111: alu_ctrl = 3'b001; // BGEU (SUB)
                endcase
            end

            2'b10: begin // Arithmetic/Logic
                case (funct3)
                    3'b000: begin // ADD/SUB
                        if (funct7_5 == 1'b0)
                            alu_ctrl = 3'b000; // ADD
                        else if (funct7_5 == 1'b1)
                            alu_ctrl = 3'b001; // SUB
                    end

                    3'b001: alu_ctrl = 3'b101; // SLL
                    3'b010: alu_ctrl = 3'b010; //! SLT (AND)?
                    3'b011: alu_ctrl = 3'b011; //! SLTU (OR)?
                    3'b100: alu_ctrl = 3'b100; // XOR
                    3'b101: begin // SRL/SRA
                        if (funct7_5 == 1'b0)
                            alu_ctrl = 3'b110; // SRL (LSR)
                        else if (funct7_5 == 1'b1)
                            alu_ctrl = 3'b111; // SRA (ASR)
                    end

                    3'b110: alu_ctrl = 3'b011; // OR 
                    3'b111: alu_ctrl = 3'b010; // AND 
                endcase
            end
        endcase
    end

endmodule
