$date
	Mon Apr 10 17:43:40 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module main $end
$var wire 32 ! x [31:0] $end
$var reg 32 " a [31:0] $end
$var reg 32 # b [31:0] $end
$var reg 4 $ mode [3:0] $end
$scope module alu32_0 $end
$var wire 32 % A [31:0] $end
$var wire 32 & B [31:0] $end
$var wire 4 ' mode [3:0] $end
$var wire 32 ( X [31:0] $end
$scope function operation $end
$var reg 32 ) A [31:0] $end
$var reg 32 * B [31:0] $end
$var reg 4 + mode [3:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b1 +
b10 *
b1 )
b11 (
b1 '
b10 &
b1 %
b1 $
b10 #
b1 "
b11 !
$end
#100
b11111111111111111111111111101010 !
b11111111111111111111111111101010 (
b100000 *
b1010 )
b10 +
b10 $
b10 '
b100000 #
b100000 &
b1010 "
b1010 %
#200
b11001000 !
b11001000 (
b11001010 *
b11001100 )
b11 +
b11 $
b11 '
b11001010 #
b11001010 &
b11001100 "
b11001100 %
#300
b11001110 !
b11001110 (
b100 +
b100 $
b100 '
#400
b110 !
b110 (
b101 +
b101 $
b101 '
#500
b1100110000 !
b1100110000 (
b10 *
b110 +
b110 $
b110 '
b10 #
b10 &
#600
b110011 !
b110011 (
b111 +
b111 $
b111 '
#700
b1000 +
b1000 $
b1000 '
#800
